% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/models-facenet.R
\name{model_mtcnn}
\alias{model_mtcnn}
\title{Multi-task Cascaded Convolutional Networks (MTCNN) for Face Detection}
\usage{
model_mtcnn(pretrained = TRUE, progress = TRUE, ...)
}
\arguments{
\item{pretrained}{(bool): If TRUE, returns a model pre-trained on ImageNet.}

\item{progress}{(bool): If TRUE, displays a progress bar of the download to
stderr.}

\item{...}{Other parameters passed to the model implementation.}
}
\description{
MTCNN provides face detection and alignment using a cascade of three neural networks
(\code{PNet}, \code{RNet}, \code{ONet}). It is widely used for detecting faces and
facial landmarks in images, implemented here in Torch for R with optional pretrained weights.
}
\details{
\subsection{Model Components and Architecture}{
\subsection{PNet (Proposal Network)}{
\itemize{
\item 3 convolutional layers with PReLU activations and max pooling.
\item Outputs:
\itemize{
\item \code{bbox_reg}: bounding box regression.
\item \code{cls}: classification (face/non-face probabilities via softmax).
}
}
}

\subsection{RNet (Refine Network)}{
\itemize{
\item Deeper than PNet: 3 convolution layers, 2 max pooling layers, dense layers with PReLU.
\item Outputs:
\itemize{
\item \code{bbox_reg}: refined bounding box coordinates.
\item \code{cls}: refined classification scores.
}
}
}

\subsection{ONet (Output Network)}{
\itemize{
\item Deepest network with 4 convolution layers and multiple pooling layers.
\item Fully connected layers for final outputs:
\itemize{
\item \code{bbox_reg}: bounding box regression.
\item \code{landmarks}: facial landmarks coordinates.
\item \code{cls}: face classification scores.
}
}
}

}

\subsection{Combined MTCNN Wrapper}{
\itemize{
\item Automatically loads PNet, RNet, and ONet, optionally with pretrained weights.
\item Cascades input progressively for hierarchical face detection/alignment.
\item Resizes intermediate inputs to 24x24 (RNet) and 48x48 (ONet).
}
}

\subsection{Preprocessing Functions}{
\itemize{
\item \code{fixed_image_standardization}: normalizes image tensor: (x - 127.5) / 128.
\item \code{prewhiten}: standardizes image by subtracting mean and dividing by adjusted standard deviation.
}
}

\subsection{Model URLs & Metadata}{

\if{html}{\out{<div class="sourceCode">}}\preformatted{| Weights |  Size  |
|---------|--------|
| PNet    | 30 KB  |
| RNet    | 400 KB |
| ONet    | 2 MB   |
}\if{html}{\out{</div>}}
}
}
\examples{
\dontrun{
mtcnn <- model_mtcnn(pretrained = TRUE)
mtcnn$eval()
image_tensor <- torch_randn(c(1, 3, 160, 160))
out <- mtcnn(image_tensor)
boxes <- out$boxes
landmarks <- out$landmarks
probs <- out$cls
}

}
\seealso{
Other models: 
\code{\link{model_alexnet}()},
\code{\link{model_efficientnet}},
\code{\link{model_efficientnet_v2}},
\code{\link{model_inception_v3}()},
\code{\link{model_mobilenet_v2}()},
\code{\link{model_resnet}},
\code{\link{model_vgg}},
\code{\link{model_vit}}
}
\concept{models}
