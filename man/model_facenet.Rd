% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/models-facenet.R
\name{model_facenet_pnet}
\alias{model_facenet_pnet}
\alias{model_facenet_rnet}
\alias{model_facenet_onet}
\alias{model_facenet}
\alias{model_mtcnn}
\title{MTCNN Face Detection Networks}
\usage{
model_facenet_pnet(pretrained = TRUE, progress = FALSE, ...)

model_facenet_rnet(pretrained = TRUE, progress = FALSE, ...)

model_facenet_onet(pretrained = TRUE, progress = FALSE, ...)

model_mtcnn(pretrained = TRUE, progress = TRUE, ...)
}
\arguments{
\item{pretrained}{(bool): If TRUE, returns a model pre-trained on ImageNet.}

\item{progress}{(bool): If TRUE, displays a progress bar of the download to
stderr.}

\item{...}{Other parameters passed to the model implementation.}
}
\description{
These models implement the three-stage Multi-task Cascaded Convolutional Networks (MTCNN)
architecture from the paper
\href{https://arxiv.org/abs/1604.02878}{Joint Face Detection and Alignment using Multi-task Cascaded Convolutional Networks}.
}
\details{
MTCNN detects faces and facial landmarks in an image through a coarse-to-fine pipeline:
\itemize{
\item \strong{PNet} (Proposal Network): Generates candidate face bounding boxes at multiple scales.
\item \strong{RNet} (Refine Network): Refines candidate boxes, rejecting false positives.
\item \strong{ONet} (Output Network): Produces final bounding boxes and 5-point facial landmarks.
}
\subsection{Model Variants}{

\if{html}{\out{<div class="sourceCode">}}\preformatted{| Model | Input Size     | Parameters | File Size | Outputs                       | Notes                             |
|-------|----------------|------------|-----------|-------------------------------|-----------------------------------|
| PNet  | ~12×12+        | ~3K        | 30 KB     | 2-class face prob + bbox reg  | Fully conv, sliding window stage  |
| RNet  | 24×24          | ~30K       | 400 KB    | 2-class face prob + bbox reg  | Dense layers, higher recall       |
| ONet  | 48×48          | ~100K      | 2 MB      | 2-class prob + bbox + 5-point | Landmark detection stage          |
}\if{html}{\out{</div>}}
}
}
\section{Functions}{
\itemize{
\item \code{model_facenet_pnet()}: PNet (Proposal Network) — small fully-convolutional network for candidate face box generation.

\item \code{model_facenet_rnet()}: RNet (Refine Network) — medium CNN with dense layers for refining and rejecting false positives.

\item \code{model_facenet_onet()}: ONet (Output Network) — deeper CNN that outputs final bounding boxes and 5 facial landmark points.

\item \code{model_mtcnn()}: MTCNN (Multi-task Cascaded Convolutional Networks) — face detection and alignment using a cascade of three neural networks

}}
\examples{
\dontrun{
# Example usage of PNet
model_pnet <- model_facenet_pnet(pretrained = TRUE)
model_pnet$eval()
input_pnet <- torch_randn(1, 3, 160, 160)
output_pnet <- model_pnet(input_pnet)
output_pnet

# Example usage of RNet
model_rnet <- model_facenet_rnet(pretrained = TRUE)
model_rnet$eval()
input_rnet <- torch_randn(1, 3, 24, 24)
output_rnet <- model_rnet(input_rnet)
output_rnet

# Example usage of ONet
model_onet <- model_facenet_onet(pretrained = TRUE)
model_onet$eval()
input_onet <- torch_randn(1, 3, 48, 48)
output_onet <- model_onet(input_onet)
output_onet

# Example usage of MTCNN
mtcnn <- model_mtcnn(pretrained = TRUE)
mtcnn$eval()
image_tensor <- torch_randn(c(1, 3, 160, 160))
out <- mtcnn(image_tensor)
out
}

}
\seealso{
Other models: 
\code{\link{model_alexnet}()},
\code{\link{model_deeplabv3}},
\code{\link{model_efficientnet}},
\code{\link{model_efficientnet_v2}},
\code{\link{model_fcn_resnet}},
\code{\link{model_inception_v3}()},
\code{\link{model_mobilenet_v2}()},
\code{\link{model_resnet}},
\code{\link{model_vgg}},
\code{\link{model_vit}}
}
\concept{models}
